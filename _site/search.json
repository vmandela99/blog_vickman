[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Geospatial Data Manipulation in R: Lesson2\n\n\n\n\n\n\n\nGIS\n\n\nStatistics\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJul 23, 2021\n\n\nVictor Mandela\n\n\n\n\n\n\n  \n\n\n\n\nGeospatial analysis with R: Lesson1\n\n\n\n\n\n\n\nGIS\n\n\nStatistics\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJul 16, 2021\n\n\nVictor Mandela\n\n\n\n\n\n\n  \n\n\n\n\nBusiness intelligence tools\n\n\n\n\n\n\n\nBI\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJul 9, 2021\n\n\nVictor Mandela\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Vickman",
    "section": "",
    "text": "Hi! My name is Victor Mandela, and I am from Kenya 💜.\nI’m a data enthusiast and statistics warrior, and I strive in environments that need solutions related to data research.\nI have been writing about R in my blog since 2019. I’m mostly active in the ShinyR and tidyverse community, slack groups and social media sites.\nI’m a Masters of Science in Statistics holder from the University of Nairobi. My research I am majorly interested in webApp development, machine learning and evidence-based reproducible research."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Business intelligence tools",
    "section": "",
    "text": "Business Intelligence (BI) tools play a crucial role in turning raw data into actionable insights, aiding decision-makers in making informed choices. In this blog post, we’ll explore the similarities, differences, and unique features of six popular BI tools: Excel, Power BI, Tableau, SAS, Python Dash, and R Shiny. Our analysis will focus on the learning curve and business capability rating of each tool.\n\n\n\nExcel:\n\nSimilarities: Ubiquitous in business for data analysis.\nDifferences: Limited for extensive data processing and visualization.\nUniqueness: Familiar interface but may require advanced functions for complex analytics.\n\nPower BI:\n\nSimilarities: Integrated with Microsoft products.\nDifferences: Emphasis on visualization and dashboards.\nUniqueness: User-friendly, with some learning required for advanced features.\n\nTableau:\n\nSimilarities: Focus on data visualization.\nDifferences: Steeper learning curve; powerful for interactive dashboards.\nUniqueness: Robust visualization capabilities, strong community support.\n\nSAS:\n\nSimilarities: Advanced analytics, statistical analysis.\nDifferences: Requires programming skills; traditional use for complex models.\nUniqueness: Industry-wide usage in healthcare and finance, extensive analytics capabilities.\n\nPython Dash:\n\nSimilarities: Python-based for web-based dashboards.\nDifferences: Programming-centric; suitable for data scientists.\nUniqueness: Flexibility and customization using Python.\n\nR Shiny:\n\nSimilarities: R-based, excellent for statistical analysis.\nDifferences: Requires knowledge of R programming.\nUniqueness: Strong statistical capabilities, ideal for creating interactive web applications.\n\n\n\n\n\n\n\nExcel:\n\nStrengths: Versatile for small to medium-sized datasets.\nWeaknesses: Limited scalability, less advanced analytics.\n\nPower BI:\n\nStrengths: Seamless Microsoft integration, excellent visualizations.\nWeaknesses: May require additional tools for advanced analytics.\n\nTableau:\n\nStrengths: Powerful visualization, extensive data connectivity.\nWeaknesses: Steeper learning curve, higher cost.\n\nSAS:\n\nStrengths: Robust analytics, statistical modeling, and data management.\nWeaknesses: High cost, steeper learning curve.\n\nPython Dash:\n\nStrengths: Customizable with Python, suitable for data science applications.\nWeaknesses: Learning curve for those unfamiliar with Python.\n\nR Shiny:\n\nStrengths: Strong statistical capabilities, great for R users.\nWeaknesses: Learning curve for those unfamiliar with R.\n\n\nIn conclusion, the choice of BI tool depends on specific business needs, data scale, customization requirements, and the existing skill set. Whether opting for user-friendly interfaces or diving into more complex analytics, understanding these tools’ nuances is crucial for effective decision-making."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/welcome/index.html#introduction-to-geospatial-data",
    "href": "posts/welcome/index.html#introduction-to-geospatial-data",
    "title": "Geospatial analysis with R: Lesson1",
    "section": "Introduction to Geospatial Data",
    "text": "Introduction to Geospatial Data\nGeospatial data comes in various forms, such as points, lines, and polygons, each representing different aspects of the Earth’s surface. The most common file formats for storing geospatial data are GeoJSON and Shapefiles.\n\n\n\nGeospatial using R\n\n\n\nLoading Geospatial Data in R\nIn R, the sf package is widely used for handling geospatial data. Let’s start by loading a Shapefile containing information about city boundaries.\n# Install and load required packages\ninstall.packages(\"sf\")\nlibrary(sf)\n\n# Load geospatial data\ncities &lt;- st_read(\"path/to/cities.shp\")\nThis code snippet assumes you have a Shapefile named cities.shp in your working directory. The st_read function from the sf package is used to read the Shapefile and create a spatial data frame.\n\n\nExploring Geospatial Data\nOnce the data is loaded, let’s explore its structure and attributes.\n# Display summary of the spatial data\nsummary(cities)\nThis will provide an overview of the spatial data, including the geometry type (point, line, or polygon), bounding box, and attribute data."
  },
  {
    "objectID": "posts/welcome/index.html#geospatial-data-visualization",
    "href": "posts/welcome/index.html#geospatial-data-visualization",
    "title": "Geospatial analysis with R: Lesson1",
    "section": "Geospatial Data Visualization",
    "text": "Geospatial Data Visualization\nVisualization is crucial for understanding geospatial patterns. We’ll use the ggplot2 package for creating basic maps.\n# Install and load ggplot2\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n# Plotting the cities on a map\nggplot() +\n  geom_sf(data = cities) +\n  ggtitle(\"Cities Map\")\nHere, geom_sf is used to plot the spatial features on a map. Customize the plot further by adding layers, adjusting colors, and incorporating additional geospatial data."
  },
  {
    "objectID": "posts/welcome/index.html#spatial-queries-and-analysis",
    "href": "posts/welcome/index.html#spatial-queries-and-analysis",
    "title": "Geospatial analysis with R: Lesson1",
    "section": "Spatial Queries and Analysis",
    "text": "Spatial Queries and Analysis\nPerforming spatial queries allows us to extract meaningful information from geospatial data. Let’s say we want to find cities within a specific region.\n# Define a bounding box for the region\nbbox &lt;- st_bbox(c(xmin, ymin, xmax, ymax), crs = st_crs(cities))\n\n# Extract cities within the bounding box\ncities_in_region &lt;- cities[st_within(cities, st_as_sfc(bbox)), ]\nHere, st_within is used to filter cities that fall within the specified bounding box."
  },
  {
    "objectID": "posts/welcome/index.html#basic-geospatial-statistics",
    "href": "posts/welcome/index.html#basic-geospatial-statistics",
    "title": "Geospatial analysis with R: Lesson1",
    "section": "Basic Geospatial Statistics",
    "text": "Basic Geospatial Statistics\nUnderstanding the spatial distribution of data is crucial. Let’s explore basic spatial statistics using the spdep package.\n# Install and load spdep\ninstall.packages(\"spdep\")\nlibrary(spdep)\n\n# Spatial autocorrelation analysis\nmoran &lt;- moran.test(cities$population, listw = poly2nb(st_as_sfc(cities)))\nprint(moran)\nThis example conducts a Moran’s I test to assess spatial autocorrelation in the population data."
  },
  {
    "objectID": "posts/welcome/index.html#conclusion",
    "href": "posts/welcome/index.html#conclusion",
    "title": "Geospatial analysis with R: Lesson1",
    "section": "Conclusion",
    "text": "Conclusion\nThis blog post has provided a foundational understanding of geospatial data in R. We covered loading data, visualization, spatial queries, and basic statistics. As you delve deeper into geospatial analysis, you’ll find R to be a versatile and powerful tool for unlocking valuable insights from spatial datasets.\nIn the next parts of this series, we will explore advanced topics such as spatial regression, machine learning with geospatial data, and building interactive web maps. Stay tuned for more insights into the fascinating world of spatial analytics with R!"
  },
  {
    "objectID": "posts/post-with-code/index.html#learning-curve",
    "href": "posts/post-with-code/index.html#learning-curve",
    "title": "Business intelligence tools",
    "section": "",
    "text": "Excel:\n\nSimilarities: Ubiquitous in business for data analysis.\nDifferences: Limited for extensive data processing and visualization.\nUniqueness: Familiar interface but may require advanced functions for complex analytics.\n\nPower BI:\n\nSimilarities: Integrated with Microsoft products.\nDifferences: Emphasis on visualization and dashboards.\nUniqueness: User-friendly, with some learning required for advanced features.\n\nTableau:\n\nSimilarities: Focus on data visualization.\nDifferences: Steeper learning curve; powerful for interactive dashboards.\nUniqueness: Robust visualization capabilities, strong community support.\n\nSAS:\n\nSimilarities: Advanced analytics, statistical analysis.\nDifferences: Requires programming skills; traditional use for complex models.\nUniqueness: Industry-wide usage in healthcare and finance, extensive analytics capabilities.\n\nPython Dash:\n\nSimilarities: Python-based for web-based dashboards.\nDifferences: Programming-centric; suitable for data scientists.\nUniqueness: Flexibility and customization using Python.\n\nR Shiny:\n\nSimilarities: R-based, excellent for statistical analysis.\nDifferences: Requires knowledge of R programming.\nUniqueness: Strong statistical capabilities, ideal for creating interactive web applications."
  },
  {
    "objectID": "posts/post-with-code/index.html#business-capability-rating",
    "href": "posts/post-with-code/index.html#business-capability-rating",
    "title": "Business intelligence tools",
    "section": "",
    "text": "Excel:\n\nStrengths: Versatile for small to medium-sized datasets.\nWeaknesses: Limited scalability, less advanced analytics.\n\nPower BI:\n\nStrengths: Seamless Microsoft integration, excellent visualizations.\nWeaknesses: May require additional tools for advanced analytics.\n\nTableau:\n\nStrengths: Powerful visualization, extensive data connectivity.\nWeaknesses: Steeper learning curve, higher cost.\n\nSAS:\n\nStrengths: Robust analytics, statistical modeling, and data management.\nWeaknesses: High cost, steeper learning curve.\n\nPython Dash:\n\nStrengths: Customizable with Python, suitable for data science applications.\nWeaknesses: Learning curve for those unfamiliar with Python.\n\nR Shiny:\n\nStrengths: Strong statistical capabilities, great for R users.\nWeaknesses: Learning curve for those unfamiliar with R.\n\n\nIn conclusion, the choice of BI tool depends on specific business needs, data scale, customization requirements, and the existing skill set. Whether opting for user-friendly interfaces or diving into more complex analytics, understanding these tools’ nuances is crucial for effective decision-making."
  },
  {
    "objectID": "posts/GIS2/index.html",
    "href": "posts/GIS2/index.html",
    "title": "Geospatial Data Manipulation in R: Lesson2",
    "section": "",
    "text": "Geospatial data manipulation is a crucial step in any spatial analysis project. In this blog post, we will delve into the world of geospatial data manipulation using R. Specifically, we’ll explore loading and cleaning free internal data to pave the way for insightful analyses. Let’s embark on this journey together, using a hypothetical scenario where we have access to free internal geospatial data related to public parks.\n\n\nAssuming you have a Shapefile named parks.shp containing information about public parks, we’ll use the sf package to load the data.\n# Install and load required packages\ninstall.packages(\"sf\")\nlibrary(sf)\n\n# Load internal geospatial data (parks)\nparks &lt;- st_read(\"path/to/parks.shp\")\nMake sure to replace “path/to/parks.shp” with the actual path to your Shapefile. The st_read function reads the Shapefile and creates a spatial data frame.\n\n\n\nBefore diving into manipulation, let’s explore the structure and attributes of the loaded geospatial data.\n# Display summary of the spatial data\nsummary(parks)\nThis summary will provide information about the geometry type, bounding box, and attributes of the parks dataset.\n\n\n\nClean data is essential for meaningful analyses. Let’s perform some basic cleaning steps on our parks dataset.\n\n\n# Remove duplicate geometries\nparks &lt;- st_unique(parks)\nThis step ensures that each park is represented only once in the dataset.\n\n\n\n# Check for missing values\nmissing_values &lt;- colSums(is.na(parks))\n\n# Display columns with missing values\nprint(names(missing_values[missing_values &gt; 0]))\nIdentify and handle missing values in relevant columns to maintain data integrity.\n\n\n\n\nVisualizing the geospatial data is a vital step in understanding its characteristics.\n# Plotting parks on a map\nplot(parks, main = \"Public Parks Map\", col = \"green\")\nThis basic map provides a visual overview of the public parks in the dataset. Customize it further using ggplot2 or other plotting libraries for more sophisticated visualizations.\n\n\n\nLet’s perform a basic analysis by calculating the area of each park.\n# Calculate area of parks\nparks$area &lt;- st_area(parks)\nNow, the area column contains the calculated area for each park. This information could be used for further analysis or visualization.\n\n\n\nIn this blog post, we’ve covered the essential steps of loading and cleaning geospatial data using R. Starting with the hypothetical scenario of public parks, we explored data loading, cleaning, and basic analysis. Clean and well-organized geospatial data sets the stage for more advanced spatial analytics and insights.\nIn future articles, we will delve into advanced geospatial analysis, including spatial regression, machine learning with geospatial data, and the creation of interactive web maps. Stay tuned for more exciting explorations into the world of geospatial data science!"
  },
  {
    "objectID": "posts/GIS2/index.html#loading-free-internal-geospatial-data",
    "href": "posts/GIS2/index.html#loading-free-internal-geospatial-data",
    "title": "Geospatial Data Manipulation in R: Lesson2",
    "section": "",
    "text": "Assuming you have a Shapefile named parks.shp containing information about public parks, we’ll use the sf package to load the data.\n# Install and load required packages\ninstall.packages(\"sf\")\nlibrary(sf)\n\n# Load internal geospatial data (parks)\nparks &lt;- st_read(\"path/to/parks.shp\")\nMake sure to replace “path/to/parks.shp” with the actual path to your Shapefile. The st_read function reads the Shapefile and creates a spatial data frame."
  },
  {
    "objectID": "posts/GIS2/index.html#exploring-internal-geospatial-data",
    "href": "posts/GIS2/index.html#exploring-internal-geospatial-data",
    "title": "Geospatial Data Manipulation in R: Lesson2",
    "section": "",
    "text": "Before diving into manipulation, let’s explore the structure and attributes of the loaded geospatial data.\n# Display summary of the spatial data\nsummary(parks)\nThis summary will provide information about the geometry type, bounding box, and attributes of the parks dataset."
  },
  {
    "objectID": "posts/GIS2/index.html#cleaning-geospatial-data",
    "href": "posts/GIS2/index.html#cleaning-geospatial-data",
    "title": "Geospatial Data Manipulation in R: Lesson2",
    "section": "",
    "text": "Clean data is essential for meaningful analyses. Let’s perform some basic cleaning steps on our parks dataset.\n\n\n# Remove duplicate geometries\nparks &lt;- st_unique(parks)\nThis step ensures that each park is represented only once in the dataset.\n\n\n\n# Check for missing values\nmissing_values &lt;- colSums(is.na(parks))\n\n# Display columns with missing values\nprint(names(missing_values[missing_values &gt; 0]))\nIdentify and handle missing values in relevant columns to maintain data integrity."
  },
  {
    "objectID": "posts/GIS2/index.html#spatial-data-exploration",
    "href": "posts/GIS2/index.html#spatial-data-exploration",
    "title": "Geospatial Data Manipulation in R: Lesson2",
    "section": "",
    "text": "Visualizing the geospatial data is a vital step in understanding its characteristics.\n# Plotting parks on a map\nplot(parks, main = \"Public Parks Map\", col = \"green\")\nThis basic map provides a visual overview of the public parks in the dataset. Customize it further using ggplot2 or other plotting libraries for more sophisticated visualizations."
  },
  {
    "objectID": "posts/GIS2/index.html#basic-geospatial-analysis",
    "href": "posts/GIS2/index.html#basic-geospatial-analysis",
    "title": "Geospatial Data Manipulation in R: Lesson2",
    "section": "",
    "text": "Let’s perform a basic analysis by calculating the area of each park.\n# Calculate area of parks\nparks$area &lt;- st_area(parks)\nNow, the area column contains the calculated area for each park. This information could be used for further analysis or visualization."
  },
  {
    "objectID": "posts/GIS2/index.html#conclusion",
    "href": "posts/GIS2/index.html#conclusion",
    "title": "Geospatial Data Manipulation in R: Lesson2",
    "section": "",
    "text": "In this blog post, we’ve covered the essential steps of loading and cleaning geospatial data using R. Starting with the hypothetical scenario of public parks, we explored data loading, cleaning, and basic analysis. Clean and well-organized geospatial data sets the stage for more advanced spatial analytics and insights.\nIn future articles, we will delve into advanced geospatial analysis, including spatial regression, machine learning with geospatial data, and the creation of interactive web maps. Stay tuned for more exciting explorations into the world of geospatial data science!"
  }
]
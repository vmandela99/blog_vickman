---
title: "Real time monitoring survey data"
author: "Victor Mandela"
date: "2024-01-23"
categories: [Soft Skills, Survey, R]
image: "combine.jpg"
---


## **Monitoring Data Quality in Real Time**

Preserving the integrity of collected data demands real-time monitoring mechanisms. Employ tools like the R programming language to create scripts that automatically analyze incoming data for inconsistencies or errors.

First we install the relevant packages, specifically the \[testthat package\](https://testthat.r-lib.org/)


```{r echo=TRUE}
# Install and load necessary packages
# install.packages(c("dplyr", "lubridate", "testthat"))
library(dplyr)
library(lubridate)
library(testthat)

```


We then generate an example agricultural data set for practice that has "Temperature" and "Crop yield" as some of its variable. We use "Set seed" to make sure there is reproducibility of the data again. 


```{r echo=TRUE}

# Function to generate a sample dataset
generate_sample_dataset <- function() {
  set.seed(123)
  n_rows <- 100
  agricultural_data <- data.frame(
    temperature = rnorm(n_rows, mean = 25, sd = 5),
    crop_yield = rpois(n_rows, lambda = 30)
  )
  # write.csv(agricultural_data, "agricultural_data.csv", row.names = FALSE)
}

# Function to check for outliers and validate data
check_data_quality <- function() {
  # Load the dataset
  # agricultural_data <- read.csv("agricultural_data.csv")

  # Check for outliers in 'crop_yield' using the IQR method
  crop_yield_outliers <- boxplot.stats(agricultural_data$crop_yield)$out
  test_that("No outliers in crop_yield", expect_length(crop_yield_outliers, 0))

  # Validate 'temperature' against predefined criteria
  invalid_temperature <- agricultural_data %>%
    filter(temperature < -20 | temperature > 40)
  test_that("Valid temperature values", expect_equal(nrow(invalid_temperature), 0))

  # Add additional checks for other variables as needed

  # Print timestamp for feedback
  print(paste("Data quality check completed at", Sys.time()))
}
```


some text here


```{r echo=TRUE}

# Generate a sample dataset
generate_sample_dataset()

# Schedule the script to run every day at a specific time (e.g., 2:00 AM)
while (TRUE) {
  current_time <- as.numeric(format(Sys.time(), "%H%M"))

  # Check if it's time to run the script (e.g., 2:00 AM)
  if (current_time >= 200 && current_time < 201) {
    test_file("data_quality_checks.R")  # Run the tests
    check_data_quality()
    Sys.sleep(86400)  # Sleep for 24 hours (86400 seconds) before checking again
  } else {
    Sys.sleep(60)  # Sleep for 1 minute before checking again
  }
}


```


In this script, the testthat library is used to create tests within the check_data_quality function. The tests check for the absence of outliers in 'crop_yield' and the validity of 'temperature' values. If any of the tests fail, testthat will throw an error, providing instant feedback on data quality.

The script then schedules the data quality checks to run every day at a specific time. Adjust the time conditions as needed for your specific schedule. The Sys.sleep function is used to introduce delays between checks.

